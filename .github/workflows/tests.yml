name: tests

on:
  push:
    branches:
      - main
    paths:
      - '**.py'
      - '.github/workflows/tests.yml'
      - 'pyproject.toml'
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-python@main
        with:
          python-version: '3.x'
      - uses: actions/cache@main
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: lint-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}
      - run: pip install flake8 black
      - run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - run: black . --check
  test_nonspatial:
    needs: [ lint ]
    name: test non-spatial conversions
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python: [ '3.7', '3.8', '3.9', '3.10' ]
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-python@main
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/cache@main
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: test-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}
      - run: pip install ".[test]"
      - run: pytest -n auto -m "not spatial"
  test_spatial:
    needs: [ lint ]
    name: test spatial conversions
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python: [ '3.7', '3.8', '3.9', '3.10' ]
        exclude:
          - os: macos-latest
            python: '3.10'
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-python@main
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/cache@main
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: test-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}
      - run: pip install ".[test,spatial]"
      - run: pytest -n auto -m "spatial"
  test_with_coverage:
    needs: [ lint, test_nonspatial, test_spatial ]
    name: test with coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-python@main
        with:
          python-version: '3.x'
      - uses: actions/cache@main
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: test-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}
      - run: pip install ".[test,spatial]"
      - run: pytest --cov . --cov-report xml:coverage.xml
      - run: coverage report
      - uses: codecov/codecov-action@master
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          fail_ci_if_error: true
