[project]
name = 'typepigeon'
description = 'Python type converter'
authors = [{ name = 'Zach Burnett', email = 'zachary.r.burnett@gmail.com' }]
readme = 'README.md'
requires-python = '>=3.7'
license = { file = 'LICENSE' }
dependencies = ['python-dateutil']
dynamic = ['version']

[project.optional-dependencies]
spatial = ['pyproj', 'shapely']
test = ['pytest', 'pytest-cov', 'pytest-xdist']
docs = ['dunamai', 'm2r2', 'sphinx', 'sphinx-rtd-theme', 'tomli; python_version <"3.11"', ]

[project.urls]
repository = 'https://github.com/zacharyburnett/TypePigeon.git'
documentation = 'https://typepigeon.readthedocs.io'

[build-system]
requires = [
    'setuptools >=61',
    'setuptools_scm[toml] >=3.4',
    'wheel',
]
build-backend = 'setuptools.build_meta'

[tool.setuptools_scm]

[tool.pytest.ini_options]
markers = ['spatial']
norecursedirs = [
    'build',
    '.eggs',
    'venv',
    '.tox',
]

[tool.ruff]
line-length = 127
extend-select = [
    'F',      # Pyflakes (part of default flake8)
    'W', 'E', # pycodestyle (part of default flake8)
    'I',      # isort (import sorting)
    # 'N',      # pep8-naming
    'D',      # pydocstyle (docstring style guide)
    'UP',     # pyupgrade (upgrade code to modern python)
    'YTT',    # flake8-2020 (system version info)
    #'ANN',    # flake8-annotations (best practices for type annotations)
    'S',      # flake8-bandit (security checks)
    #'BLE',    # flake8-blind-except (prevent blind except statements)
    'B',      # flake8-bugbear (prevent common gotcha bugs)
    'A',      # flake8-builtins (prevent shadowing of builtins)
    'C4',     # flake8-comprehensions (best practices for comprehensions)
    'T10',    # flake8-debugger (prevent debugger statements in code)
    'EM',     # flake8-errormessages (best practices for error messages)
    'FA',     # flake8-future-annotations (correct usage future annotations)
    'ISC',    # flake8-implicit-str-concat (prevent implicit string concat)
    'ICN',    # flake8-import-conventions (enforce import conventions)
    'G',      # flake8-logging-format (best practices for logging)
    'INP',    # flake8-no-pep420 (prevent use of PEP420, i.e. implicit name spaces)
    'PIE',    # flake8-pie (misc suggested improvement linting)
    # 'T20',    # flake8-print (prevent print statements in code)
    'PT',     # flake8-pytest-style (best practices for pytest)
    'Q',      # flake8-quotes (best practices for quotes)
    'RSE',    # flake8-raise (best practices for raising exceptions)
    'RET',    # flake8-return (best practices for return statements)
    #'SLF',    # flake8-self (prevent private member access)
    'SLOT',   # flake8-slots (require __slots__ for immutable classes)
    #'SIM',    # flake8-simplify (suggest simplifications to code where possible)
    'TID',    # flake8-tidy-imports (prevent banned api and best import practices)
    'TCH',    # flake8-type-checking (move type checking imports into type checking blocks)
    'INT',    # flake8-gettext (when to use printf style strings)
    # 'ARG',    # flake8-unused-arguments (prevent unused arguments)
    'PTH',    # flake8-use-pathlib (prefer pathlib over os.path)
    # 'ERA',    # eradicate (remove commented out code)
    'PGH',    # pygrep (simple grep checks)
    'PL',     # pylint (general linting, flake8 alternative)
    'TRY',    # tryceratops (linting for try/except blocks)
    'FLY',    # flynt (f-string conversion where possible)
    'NPY',    # NumPy-specific checks (recommendations from NumPy)
    'PERF',   # Perflint (performance linting)
    'LOG',
    'RUF',    # ruff specific checks
]
extend-ignore = [
    'PERF203', # `try`-`except` within a loop incurs performance overhead
    'B008',
    'B028',
    'PLW2901', # `for` loop variable overwritten by assignment target
    'PTH123', # use `Path.open()` instead of `open()`
    'ISC001', # interferes with formatter
    'PLR0912', # Too many branches
    'PLR0913', # Too many arguments
    'PLR0915', # Too many statements
    'PLR2004', # Magic value used in comparison
    'PT011', # `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception

    'E501', # Line too long
    'E722', # Do not use bare `except`

    'S101', # use of `assert` detected
    'INP001', # part of an implicit namespace package. Add an `__init__.py`.
    'RUF012', # mutable class variable

    # Pydocstyle (to fix over time
    'D100', # Undocumented public module
    'D101', # Undocumented public class
    'D102', # Undocumented public method
    'D103', # Undocumented public function
    'D104', # Undocumented public package
    'D105', # Undocumented magic function
    'D107', # Missing docstring in `__init__`
    'D205', # 1 blank line required between summary line and description
    'D401', # First line of docstring should be in imperative mood
    'D404', # First word of docstring should not be This
]
extend-exclude = [
    "build",
    "docs",
    "dist",
    ".eggs",
    ".tox",
    "venv",
    "tests/data",
]
